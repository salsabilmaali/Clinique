package com.example.demo.Controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Models.RendezVous;
import com.example.demo.Services.RendezVousService;

@RestController
@CrossOrigin(origins = "http://localhost:4200", allowCredentials = "true")
public class RendezVousController {
    
    @Autowired
    private RendezVousService rendezVousService;
    
    @GetMapping("/rendez-vous")
    public List<RendezVous> getAllRendezVous() {
        return rendezVousService.getAllRendezVous();
    }
    
    @GetMapping("/rendez-vous/today")
    public List<RendezVous> getTodayRendezVous() {
        return rendezVousService.getTodayRendezVous();
    }
    
    @GetMapping("/rendez-vous/today/count")
    public long getTodayRendezVousCount() {
        return rendezVousService.getTodayRendezVousCount();
    }
    
    @GetMapping("/rendez-vous/patient/{patientId}")
    public List<RendezVous> getRendezVousByPatient(@PathVariable Long patientId) {
        return rendezVousService.getRendezVousByPatient(patientId);
    }
    
    @GetMapping("/rendez-vous/medecin/{medecinId}")
    public List<RendezVous> getRendezVousByMedecin(@PathVariable Long medecinId) {
        return rendezVousService.getRendezVousByMedecin(medecinId);
    }
    
    @PostMapping("/rendez-vous")
    public RendezVous createRendezVous(@RequestBody RendezVous rendezVous) {
        return rendezVousService.createRendezVous(rendezVous);
    }
    
    @PutMapping("/rendez-vous/{id}")
    public ResponseEntity<RendezVous> updateRendezVous(@PathVariable Long id, @RequestBody RendezVous rendezVous) {
        Optional<RendezVous> updatedRendezVous = rendezVousService.updateRendezVous(id, rendezVous);
        
        if (updatedRendezVous.isPresent()) {
            return ResponseEntity.ok(updatedRendezVous.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    @DeleteMapping("/rendez-vous/{id}")
    public ResponseEntity<Void> deleteRendezVous(@PathVariable Long id) {
        boolean deleted = rendezVousService.deleteRendezVous(id);
        
        if (deleted) {
            return ResponseEntity.ok().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    @GetMapping("/rendez-vous/upcoming")
    public List<RendezVous> getUpcomingRendezVous() {
        return rendezVousService.getUpcomingRendezVous();
    }
    
    @GetMapping("/rendez-vous/status/{status}")
    public List<RendezVous> getRendezVousByStatus(@PathVariable String status) {
        return rendezVousService.getRendezVousByStatus(status);
    }
    
    @PutMapping("/rendez-vous/{id}/status/{status}")
    public ResponseEntity<RendezVous> updateRendezVousStatus(@PathVariable Long id, @PathVariable String status) {
        Optional<RendezVous> updatedRendezVous = rendezVousService.updateRendezVousStatus(id, status);
        
        if (updatedRendezVous.isPresent()) {
            return ResponseEntity.ok(updatedRendezVous.get());
        } else {
            return ResponseEntity.badRequest().build();
        }
    }
}
